create table "public"."translations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "content" text not null,
    "langCode" text not null,
    "post" uuid,
    "reply" uuid
);


alter table "public"."translations" enable row level security;

alter table "public"."profiles" drop column "updated_at";

alter table "public"."profiles" add column "created_at" timestamp with time zone not null default now();

CREATE UNIQUE INDEX translations_pkey ON public.translations USING btree (id);

alter table "public"."translations" add constraint "translations_pkey" PRIMARY KEY using index "translations_pkey";

alter table "public"."translations" add constraint "translations_post_fkey" FOREIGN KEY (post) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."translations" validate constraint "translations_post_fkey";

alter table "public"."translations" add constraint "translations_reply_fkey" FOREIGN KEY (reply) REFERENCES replies(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."translations" validate constraint "translations_reply_fkey";

grant delete on table "public"."translations" to "anon";

grant insert on table "public"."translations" to "anon";

grant references on table "public"."translations" to "anon";

grant select on table "public"."translations" to "anon";

grant trigger on table "public"."translations" to "anon";

grant truncate on table "public"."translations" to "anon";

grant update on table "public"."translations" to "anon";

grant delete on table "public"."translations" to "authenticated";

grant insert on table "public"."translations" to "authenticated";

grant references on table "public"."translations" to "authenticated";

grant select on table "public"."translations" to "authenticated";

grant trigger on table "public"."translations" to "authenticated";

grant truncate on table "public"."translations" to "authenticated";

grant update on table "public"."translations" to "authenticated";

grant delete on table "public"."translations" to "service_role";

grant insert on table "public"."translations" to "service_role";

grant references on table "public"."translations" to "service_role";

grant select on table "public"."translations" to "service_role";

grant trigger on table "public"."translations" to "service_role";

grant truncate on table "public"."translations" to "service_role";

grant update on table "public"."translations" to "service_role";

create policy "Enable delete for authenticated users only"
on "public"."likes"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."likes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for authenticated users only"
on "public"."likes"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for users based on author"
on "public"."posts"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = author));


create policy "Enable insert for authenticated users only"
on "public"."posts"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."posts"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."replies"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = author));


create policy "Enable insert for authenticated users only"
on "public"."replies"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."replies"
as permissive
for select
to public
using (true);



